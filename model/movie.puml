@startuml
package api{
    class OptionEngageApi{
        + engage(UserId userId, IntroductionCode introductionCode)
    }
}
package service{
    class PremiumOptionEngageService{
    + void engage(UserId userId, IntroductionCode introductionCode)
    }

    class PremiumOptionEngagementCheckService {
        + Validation<ImpossibleNewPremiumOptionApplyingError, NewPremiumOptionApplyingUserEntity> check(UserId userId, IntroductionCode introductionCode)
    }

    class NoticeService{
    + void send(Notification notification)
    }
}
OptionEngageApi .down.> PremiumOptionEngageService
PremiumOptionEngageService .right.> NoticeService
PremiumOptionEngageService .left.> PremiumOptionEngagementCheckService

package domain {
package user {
    class UserId <<Key>>{
                String value
    }
    class RegistrationDate{
        LocalDate value
        + boolean isOneYearPassedSinceRegisterDate()
    }
    interface ContactAddress{
                + NotificationTo createNotificationTo()
    }
    class Sms {
        PhoneNumber phoneNumber
        + NotificationTo createNotificationTo()
    }
    class PhoneNumber{
        String value
        + NotificationTo createNotificationTo()
    }
    class Mail {
        MailAddress mailAddress
        + NotificationTo createNotificationTo()
    }
    class MailAddress{
        String value
        + NotificationTo createNotificationTo()
    }
}
package new_premium_option_application {

        class NewPremiumOptionApplyingUserEntity <<Entity>> {
            UserId userId
            RegistrationDate registrationDate
            ContactAddress contactAddress

            + boolean canEngagePremiumOption()
            + Notification createNotification()
        }
        interface NewPremiumOptionApplyingUserRepository {
        + NewPremiumOptionApplyingUserEntity referByUserId(UserId userId)
        }
        enum ImpossibleNewPremiumOptionApplyingError{
        OneYearNotPassedSinceRegisterDate,
        PremiumOptionAlreadyEngaged,
        IntroductionCodeUsed
        }
        NewPremiumOptionApplyingUserEntity .down.> UserId
        NewPremiumOptionApplyingUserEntity .down.> RegistrationDate

        NewPremiumOptionApplyingUserEntity .down.> ContactAddress
        ContactAddress .down.> Sms
        ContactAddress .down.> Mail
        Sms .down.> PhoneNumber
        Mail .down.> MailAddress
        PremiumOptionEngagementCheckService .down.> ImpossibleNewPremiumOptionApplyingError

        }

    package premium_option {
        class PremiumOption{
            PremiumOptionId PremiumOptionId
        }
        
        class PremiumOptionId{
            String value
        }
        interface PremiumOptionRepository {
        + PremiumOptionId engage(UserId userId)
        + Option<PremiumOption> refer(UserId userId)
        }
    }
    PremiumOption .down.> PremiumOptionId
    PremiumOptionRepository ..> UserId
    PremiumOptionRepository ..> PremiumOptionId
    PremiumOptionRepository .right.>  "0..1" PremiumOption



    package notification{
    package notification{
            class Notification{
                NotificationTo notificationTo
                NotificationText notificationText
            }
            class NotificationTo {
                String value
            }

            class NotificationText {
                String value
            }

            interface NoticeRepository {
                + void sendNotification(Notification notification)
            }

            MailAddress .down.> NotificationTo
            PhoneNumber .down.> NotificationTo
            Notification .down.> NotificationTo
            Notification .down.> NotificationText
            NewPremiumOptionApplyingUserEntity .down.> Notification
        }

    package introduction_code{
        class IntroductionCode{
            PremiumOptionIntroductionCode premiumOptionIntroductionCode
            IntroductionCodeUseState introductionCodeUseState
        }
        class PremiumOptionIntroductionCode {
            String value
        }
        enum IntroductionCodeUseState{
            USE,
            UNUSED
            + boolean isUnused()
        }

        interface IntroductionCodeRepository {
        IntroductionCode refer(PremiumOptionIntroductionCode premiumOptionIntroductionCode)
        }
        IntroductionCodeRepository .right.> IntroductionCode
        IntroductionCodeRepository ..> PremiumOptionIntroductionCode
    }
    PremiumOptionEngageService .down.> IntroductionCodeRepository


    NewPremiumOptionApplyingUserRepository .down.> UserId
    NewPremiumOptionApplyingUserRepository .down.> NewPremiumOptionApplyingUserEntity

    IntroductionCode .down.> PremiumOptionIntroductionCode
    IntroductionCode .down.> IntroductionCodeUseState
}
PremiumOptionEngageService .down.> NewPremiumOptionApplyingUserRepository
NoticeService .down.> NoticeRepository
NoticeRepository .left.> Notification
PremiumOptionEngageService .down.> PremiumOptionRepository

@enduml

